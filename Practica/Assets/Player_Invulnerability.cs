using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class Player_Invulnerability : MonoBehaviour
{
    public static bool invincible = false;
    public Movement movement;
    LayerMask enemyLayerMask = 12;
    LayerMask spikesLayerMask = 15;
    public Animator animator;
    public Player_Movement playerMovement;
    public Health health;
    SwampLevelManager levelManager;
    CaveLevelManager levelManager1;

    private void Start()
    {
        Physics2D.IgnoreLayerCollision(9, 12, false);
    }

    void OnCollisionEnter2D(Collision2D collision)
    {
        if (!invincible)
        {
            if (collision.gameObject.layer == enemyLayerMask)
            {
                playerMovement.SetRunSpeed(15f);
                movement.SetJumpForce(0f);
                health.ReduceHealth(1);
                invincible = true;
                Physics2D.IgnoreLayerCollision(9, 12, true);
                animator.SetBool("isHurted", true);
                animator.SetBool("isJumping", false);
                Invoke("ResetInvulnerability", 2f);
            } else if (collision.gameObject.layer == spikesLayerMask)
            {
                playerMovement.SetRunSpeed(0f);
                movement.SetJumpForce(0f);
                SwampLevelManager.isInputEnabled = false;
                CaveLevelManager.isInputEnabled = false;
                health.ReduceHealth(1);
                invincible = true;
                animator.SetBool("isSpikeHurted", true);
                animator.SetBool("isJumping", false);
                Invoke("ResetInvulnerability", 2f);
            }
        }
    }

    private void OnCollisionStay2D(Collision2D collision)
    {
        if (!invincible)
        {
            if (collision.gameObject.layer == enemyLayerMask)
            {
                playerMovement.SetRunSpeed(15f);
                movement.SetJumpForce(0f);
                health.ReduceHealth(1);
                invincible = true;
                Physics2D.IgnoreLayerCollision(9, 12, true);
                animator.SetBool("isHurted", true);
                animator.SetBool("isJumping", false);
                Invoke("ResetInvulnerability", 2f);
            }
            else if (collision.gameObject.layer == spikesLayerMask)
            {
                playerMovement.SetRunSpeed(0f);
                movement.SetJumpForce(0f);
                health.ReduceHealth(1);
                invincible = true;
                animator.SetBool("isSpikeHurted", true);
                animator.SetBool("isJumping", false);
                Invoke("ResetInvulnerability", 2f);
            }
        }
    }

    private void OnTriggerStay2D(Collider2D collision)
    {
        if (!invincible)
        {
            if (collision.gameObject.layer == spikesLayerMask)
            {
                playerMovement.SetRunSpeed(0f);
                movement.SetJumpForce(0f);
                health.ReduceHealth(1);
                invincible = true;
                animator.SetBool("isSpikeHurted", true);
                animator.SetBool("isJumping", false);
                Invoke("ResetInvulnerability", 2f);
            }
        }
    }

    private void OnTriggerEnter2D(Collider2D collision)
    {
        if (!invincible)
        {
            if (collision.gameObject.layer == enemyLayerMask)
            {
                playerMovement.SetRunSpeed(15f);
                movement.SetJumpForce(0f);
                health.ReduceHealth(1);
                invincible = true;
                Physics2D.IgnoreLayerCollision(9, 12, true);
                animator.SetBool("isHurted", true);
                animator.SetBool("isJumping", false);
                Invoke("ResetInvulnerability", 2f);
            }
            else if (collision.gameObject.layer == spikesLayerMask)
            {
                playerMovement.SetRunSpeed(0f);
                movement.SetJumpForce(0f);
                health.ReduceHealth(1);
                invincible = true;
                animator.SetBool("isSpikeHurted", true);
                animator.SetBool("isJumping", false);
                Invoke("ResetInvulnerability", 2f);
            }
        }
    }

    void RespawnAfterSpikes()
    {
        levelManager = GameObject.FindWithTag("LevelManager").GetComponent<SwampLevelManager>();
        levelManager1 = GameObject.FindWithTag("LevelManager").GetComponent<CaveLevelManager>();

        if (levelManager != null)
        {
            transform.position = levelManager.lastCheckPointPos;
        } else if (levelManager1 != null)
        {
            transform.position = levelManager1.lastCheckPointPos;
        }
    }

    void ResetInvulnerability()
    {
        invincible = false;
        animator.SetBool("isHurted", false);
        animator.SetBool("isJumping", false);
        animator.SetBool("isAttacking", false);
        animator.SetBool("isAttacking2", false);
        animator.SetBool("isAttacking3", false);
        animator.SetBool("isSpikeHurted", false);
        playerMovement.SetRunSpeed(30f);
        movement.SetJumpForce(900f);
        Physics2D.IgnoreLayerCollision(9, 12, false);
        SwampLevelManager.isInputEnabled = true;
        CaveLevelManager.isInputEnabled = true;
    }
}
